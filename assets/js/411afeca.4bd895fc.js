(self.webpackChunknodi_docs=self.webpackChunknodi_docs||[]).push([[995],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),f=a,h=u["".concat(c,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7341:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},c="Create a new Node",d={unversionedId:"create-a-new-node",id:"create-a-new-node",isDocsHomePage:!1,title:"Create a new Node",description:"This section describes the steps to create a new Node.",source:"@site/developer/create-a-new-node.md",sourceDirName:".",slug:"/create-a-new-node",permalink:"/docs/developer/create-a-new-node",editUrl:"https://github.com/Nodi3d/docs/edit/main/developer/create-a-new-node.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Directory Structure",permalink:"/docs/developer/directory-structure"}},l=[{value:"Create a Node class file",id:"create-a-node-class-file",children:[]},{value:"Define the Node class file",id:"define-the-node-class-file",children:[]},{value:"Registering the Node index",id:"registering-the-node-index",children:[]},{value:"Try Node",id:"try-node",children:[]},{value:"Write a description of the Node",id:"write-a-description-of-the-node",children:[]}],p={toc:l};function u(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-new-node"},"Create a new Node"),(0,o.kt)("p",null,"This section describes the steps to create a new Node."),(0,o.kt)("h2",{id:"create-a-node-class-file"},"Create a Node class file"),(0,o.kt)("p",null,"All Node classes are managed under ",(0,o.kt)("strong",{parentName:"p"},"assets/scripts/core/nodes")," folder."),(0,o.kt)("p",null,"The folder structure corresponds directly to the directory structure when searching for Nodes, so\nYou can either create the Node under the folder you want it to belong to, or create a new folder and create the class files under it.\u3000"),(0,o.kt)("p",null,"Create a class file with the name ",(0,o.kt)("strong",{parentName:"p"},"[Node name]",".ts"),"."),(0,o.kt)("p",null,"For testing purposes, we will create an ",(0,o.kt)("strong",{parentName:"p"},"examples")," folder and create a class file under it with the name ",(0,o.kt)("strong",{parentName:"p"},"Example.ts"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ExamplesFolder",src:n(8804).Z})),(0,o.kt)("h2",{id:"define-the-node-class-file"},"Define the Node class file"),(0,o.kt)("p",null,"In the newly created file, we will implement the contents of the Node."),(0,o.kt)("p",null,"We'll implement it by extending ",(0,o.kt)("strong",{parentName:"p"},"NodeBase"),", which is the base class for all Nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport default class Example extends NodeBase {\n\n  // Name to be displayed in the NodeView in the editor\n  public get displayName(): string {\n    return 'Example';\n  }\n\n  // Define the data type of the inputs\n  public registerInputs(manager: InputManager): void {\n    manager.add('w', 'Width of a rectangle curve', DataTypes.NUMBER, AccessTypes.ITEM);\n    manager.add('h', 'Height of a rectangle curve', DataTypes.NUMBER, AccessTypes.ITEM);\n  }\n\n  // Define the data type of the outputs\n  public registerOutputs(manager: OutputManager): void {\n    manager.add('c', 'Rectangle curve', DataTypes.CURVE, AccessTypes.ITEM);\n  }\n\n  // Define how to take the input and return the output\n  public solve(access: DataAccess): void {\n    const width = access.getData(0) as number;\n    const height = access.getData(1) as number;\n    const curve = new NRectangleCurve(new NPlane(), new NDomain(0, width), new NDomain(0, height));\n    access.setData(0, curve);\n  }\n\n}\n\n")),(0,o.kt)("h2",{id:"registering-the-node-index"},"Registering the Node index"),(0,o.kt)("p",null,"When you have finished defining the Node, you can register the Node index with the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\nyarn barrel # Register the path of the file you added to assets/scripts/core/nodes/index.ts file.\n\n")),(0,o.kt)("h2",{id:"try-node"},"Try Node"),(0,o.kt)("p",null,"The Node you added in the above steps can be selected in the editor, so you can see how it works."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ExampleNode",src:n(2305).Z})),(0,o.kt)("h2",{id:"write-a-description-of-the-node"},"Write a description of the Node"),(0,o.kt)("p",null,"We manage the description of each Node in ",(0,o.kt)("strong",{parentName:"p"},"assets/json/description.json"),"."),(0,o.kt)("p",null,"If you add a description here, you can display the text in the Node Inspector or in the description screen (nodi3d.com/nodes/","[Node name]",")."))}u.isMDXComponent=!0},2305:function(e,t,n){"use strict";t.Z=n.p+"assets/images/ExampleNode-819a7ca00a61e1fcfe0785c918d9616b.gif"},8804:function(e,t,n){"use strict";t.Z=n.p+"assets/images/ExamplesFolder-ab64d1c72f41366dc7b2fce47999c3e6.png"}}]);